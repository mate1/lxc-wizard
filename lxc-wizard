#!/usr/bin/perl -w

############################################################
#                                                          #
# Copyright (C) 2011-2012  Billy Nadeau                    #
#                                                          #
############################################################

use strict;
use Socket;
use Getopt::Long;
use File::Basename;
use File::Copy;
use File::Path;
use File::Slurp;

# To get requirements on Debian:
# apt-get install libtie-ixhash-perl libfile-slurp-perl libfile-slurp-unicode-perl

my $DEBUG  = 0;
my $DRYRUN = 0;

my $help;

our $finalRC = 1;
my $rc = 1;

our %Default = (
    LVM		=> 'Y',
    LVSize	=> '32G',
    FSTab	=> 'Y',
    MEMORY	=> '8G',
    SWAP	=> '8G',
    CPU		=> 1024,
    IO		=> 1000,
    AUTOSTART	=> 'Y',
    BUILD 	=> 'Y',
    REFRESH	=> 'Y',
    LAUNCH	=> 'Y',
    CREATE	=> 'Y',
    GO		=> 'Y'
);

our( $container, $hostname, $domain, $dnsdomain, @search, $ns1, $ns2, $fqdn, $ipaddr, $gwaddr );	# User provided information
our( $vgname, $lvname, $lvsize, $mountpoint, $rootfs );
our( $memory, $swap, $cpushares, $ioweight, $autostart, $launch );
our( $rootpass, @users, @keys );
our( $postcreate );
our( $template );

my( $LVM, $MOUNT, $FSTAB, $CREATE );	 # Features to manage
my( $confirm, $AUTO, $BUILD, $REFRESH ); # Local use only

GetOptions( 'help'		=> \$help,

	    'hostname=s'	=> \$hostname,
	    'domain=s'		=> \$domain,
		  'dnsdomain=s' => \$dnsdomain,
		  'search=s'    => \@search,
		  'ns1=s'       => \$ns1,
		  'ns2=s'       => \$ns2,
	    'fqdn=s'		=> \$fqdn,
	    'ipaddr=s'		=> \$ipaddr,
	    'gwaddr=s'		=> \$gwaddr,
	    'container=s'	=> \$container,
	    'vgname=s'		=> \$vgname,
	    'lvname=s'		=> \$lvname,
	    'lvsize=s'		=> \$lvsize,
	    'mountpoint=s'	=> \$mountpoint,
		  'postcreate=s' => \$postcreate,

	  	'template=s' => \$template,

		  'rootpass=s' => \$rootpass,
		  'user=s' => \@users,
		  'key=s' => \@keys,

	    'autostart=s'	=> \$autostart,
	    'launch=s'		=> \$launch,

	    'memory=s'		=> \$memory,
	    'swap=s'		=> \$swap,
	    'cpushares=s'	=> \$cpushares,
	    'ioweight=s'	=> \$ioweight,

	    'LVM=s'		=> \$LVM,
	    'FSTAB=s'		=> \$FSTAB,
	    'CREATE=s'		=> \$CREATE,

	    'BUILD'		=> \$BUILD,
	    'REFRESH'		=> \$REFRESH,

	    'AUTO'		=> \$AUTO,
		  'dryrun'  => \$DRYRUN
	    );

#	    'MEMORY=s'		=> \$MEMORY,
#	    'CPU=s'		=> \$CPU,
#	    'IO=s'		=> \$IO,

print "\n** Container Creation Wizard **\n";

help() if $help;

sub run {
	my $cmd = shift;

	if ($DRYRUN) {
		print $cmd, "\n";
	} else {
		system($cmd);
	}
}

sub help
{
    print <<EOH;
Usage: $0 [options]

    --template TPL  template (dir) that will define the container's layout

    --fqdn DQDN     full qualified domain name of the target container
    --hostname HOST hostname (if it can't be extracted from the fqdn)
    --domain DOMAIN domain name (if it can't be extracted from the fqdn)
    --dnsdomain DOMAIN domain used in resolv.conf 
    --search SEARCH dns search domains in resolv.conf
                    (can be passed multiple times)
    --ns1    NS1    first name server
    --ns1    NS1    second name server
    --ipaddr IPADDR ip address (if it can't be found by gethost call)
    --gwaddr IPADDR gateway address

    --rootpass      the root password to set
    --user          user to add in the format user:pass
                    (can be passed multiple times)
    --key           add the key to given user, in the format
                    user:/path/to/key
                    (can be passed multiple times)

    --postcreate    script to copy into the container and run
                    after the container is created (in the chroot)
    
    Anything passed at the end after -- will be passed along to the
    post create script. For example: -- --cluster-id 1
EOH
}

do
{
	if( $AUTO )
	{
		print "Creating container with the following parameters:\n\n";
	}
	else
	{
		print "Please enter the following information\n"
		. "default values in [], hit enter to accept\n\n";
	}
	
	# Container Config

	$template = request( "Template name", $template );

	unless( $fqdn )
	{
		$fqdn = "$hostname.$domain" if( defined $hostname and defined $domain );
	}
	
	$fqdn = request( "Container FQDN", $fqdn );
	
	unless( $ipaddr )
	{
		if( my $tmp = gethostbyname( $fqdn ) )
		{
			$ipaddr = inet_ntoa( $tmp );
		}
	}
	
	$ipaddr = request( "IP Address", $ipaddr );
	
	unless( $gwaddr )
	{
		$ipaddr =~ /(\d+\.\d+)\.\d+\.\d+/;
		$gwaddr = $1 . '.0.1';
	}
	
	$gwaddr = request( "GW Address", $gwaddr );
	
	unless( $hostname and $domain )
	{
		$fqdn =~ /([^.]+)\./;
		$hostname = $1;
		$domain = $';
	}
	
	$container = ucfirst( $hostname )
	unless( $container );
	
	$container = request( "Container LXC Name", $container );
	
	$Default{ LVName } = $container;
	$Default{ MountPoint } = "/var/lib/lxc/$container";
	
	# LVM Stuff
	
	$LVM = request_bool( "Create Logical Volume", $LVM || $Default{ LVM } );
	
	if( $LVM eq 'Y' )
	{
		unless( $vgname )
		{
			my @vgs = `vgdisplay | grep Name`;
			$vgs[0] =~ /Name\s+(\w+)/;
			
			$vgname = $1;
		}
		
		$vgname = request( "Logical Volume Group", $vgname );
		$lvname = request( "Logical Volume Name", $lvname || $Default{ LVName } );
		$lvsize = request( "Logical Volume Size", $lvsize || $Default{ LVSize } );
		
		$mountpoint = request( "Mount Point", $mountpoint || $Default{ MountPoint } );
	}
	else
	{
		$mountpoint = request( "Base directory", $mountpoint || $Default{ MountPoint } );
	}

	
	# LXC Config
	
	$memory = request( "Container Memory Limit", $memory || $Default{ MEMORY } );
	$swap = request( "Container Memory+Swap Limit", $swap || $memory );
	$cpushares = request( "Container CPU Shares", $cpushares || $Default{ CPU } );
	$ioweight = request( "Container IO Weight", $ioweight || $Default{ IO } );
	
	# Container installation
	
	$CREATE = request_bool( "Install container OS", $CREATE || $Default{ CREATE } );
	
	$autostart = request_bool( "Set to autostart on boot", $autostart || $Default{ AUTOSTART } );
	$launch = request_bool( "Start container when finished", $launch || $Default{ LAUNCH } );
	
	## VERIFY ##
	
	print "\n";
	print "Please verify all information:\n";
	print "\n";
	print "Template Name:         $template\n";
	print "\n";
	print "Container Name:        $container\n";
	print "Container FQDN:        $fqdn\n";
	print "Container IP:          $ipaddr\n";
	print "Container GW:          $gwaddr\n";
	print "\n";
	print "Create Logical Volume: $LVM\n";
	print "Volume Group:          $vgname\n"	if $LVM eq 'Y';
	print "Volume Name:           $lvname\n"	if $LVM eq 'Y';
	print "Volume Size:           $lvsize\n"	if $LVM eq 'Y';
	print "Mount Point:           $mountpoint\n" if $LVM eq 'Y';
	print "Dest Directory:        $mountpoint\n" if $LVM eq 'N';
	print "\n"                                   if $rootpass;
	print "Root Password:         changed\n"     if $rootpass;
	print "\n";
	print "Memory Limit:          $memory\n";
	print "Memory+Swap Limit:     $swap\n";
	print "CPU Shares:            $cpushares\n";
	print "IO Weight:             $ioweight\n";
	print "\n";
	print "Set to start on boot:  $autostart\n";
	print "Start after setup:     $launch\n";
	print "Install OS:            $CREATE\n";
	print "\n";
	
	$confirm = request( "Is everything right", $Default{ GO } );
}
until( $confirm eq 'Y' );

print "\n";


if( $LVM eq 'Y' )
{
	print "Creating Logical Volume... ";
	$rc = not system( "lvcreate -L $lvsize -n $lvname $vgname" );
	checkrc( $rc );
	
	print "Creating Filesystem... ";
	$rc = not system( "mkfs -t ext4 -L $lvname -m 0 /dev/$vgname/$lvname" );
	checkrc( $rc );
	
	print "Tuning Filesystem... ";
	$rc = not system( "tune2fs -i 0 -c 0 /dev/$vgname/$lvname" );
	checkrc( $rc );
	
	print "Creating Mount Point... ";
	$rc = mkpath $mountpoint;
	checkrc( $rc );
	
	print "Mounting Filesystem... ";
	$rc = not system( "mount /dev/$vgname/$lvname $mountpoint" );
	checkrc( $rc );
	
	print "Updating /etc/fstab... ";
	open FSTAB, ">>/etc/fstab";
	$rc = print FSTAB "/dev/$vgname/$lvname\t$mountpoint\text4\tnoatime 0 2\n";
	close FSTAB;
	checkrc( $rc );
}
else
{
	print "Creating target directory... ";
	$rc = mkpath $mountpoint;
	checkrc( $rc );
}

if( $CREATE eq 'Y' )
{
	# Brute SH-to-Perl transliteration follows


	$rootfs = "$mountpoint/rootfs";
	
	run("$template/main --path $mountpoint --name $hostname");

	print "Adding host link... ";
	$rc = not system( "touch $rootfs/etc/host" );
	checkrc( $rc );

	if (-f "$template/etc_hosts" && $ipaddr && $hostname && $fqdn) {
		run("$template/etc_hosts $ipaddr $hostname $fqdn $rootfs");
	}

	if (-f "$template/dns" && $dnsdomain && @search && $ns1 && $ns2) {
		run("$template/dns $dnsdomain \'" . join(" ", @search) . "\' $ns1 $ns2 $rootfs");
	}

	if (-f "$template/network" && $ipaddr && $gwaddr) {
		run("$template/network $ipaddr $gwaddr $rootfs");
	}

	if (-f "$template/rootpass" && $rootpass )
	{
		run("$template/rootpass $rootpass $rootfs");
	}
	
	# add users
	if( -f "$template/adduser" && @users ) {
		foreach my $userpass (@users) {
			if ($userpass =~ /(.+):(.+)/) {
				my $user = $1;
				my $pass = $2;
				print "Adding user $user...";
				run("$template/adduser $user $pass $rootfs");
			}
		}
	}
	
	# deploy ssh keys
	if( -f "$template/addsshkey" && @keys ) {
		foreach my $userkey (@keys) {
			if ($userkey =~ /(.+):(.+)/) {

				my $user = $1;
				my $key = $2;
				
				run("$template/addsshkey $user $key $rootfs");
			}
		}
	}

	if (-f "$template/extras") {
		run("$template/extras");
	}
	
	# run post create script if any
	if( $postcreate && -f $postcreate )
	{
		print "Running post create script...";
		copy($postcreate, $rootfs);
		my $pc = basename($postcreate);
		$rc = not system("chmod +x $rootfs/$pc && chroot $rootfs /$pc " . join(" ", @ARGV));
		unlink("$rootfs/$pc");
		checkrc( $rc );
	}
}

if( $launch eq 'Y' )
{
    print "Starting container... ";
    $rc = not system( "lxc-start -d -n $container" );
    checkrc( $rc );
}

if( $finalRC )
{
    print "Good, everything seemed to work!\n";
}
else
{
    print "Shit happened.\n";
}

print "\n";

exit 0;


###  General Subs  ###

sub request_bool
{
    my( $string, $default ) = @_;
    my( $tmp );

    $default ||= '';

    print $string . " [$default] : ";

    if( $AUTO )
    {
	print "$default\n";
	return $default;
    }

    $tmp = <STDIN>;
    chomp $tmp;

    $tmp = $default unless $tmp;

    return $tmp =~ /^[YyOo]/ ? 'Y' : 'N';
}

sub request
{
    my( $string, $default ) = @_;
    my( $tmp );

    $default ||= '';

    print $string . " [$default] : ";

    if( $AUTO )
    {
	print "$default\n";
	return $default;
    }

    $tmp = <STDIN>;
    chomp $tmp;

    return $tmp? $tmp : $default;
}

sub checkrc
{
    my $rc = shift;
    if( $rc )
    {
	print "OK\n";
    }
    else
    {
	print "error!\n";

	my $answer;

	do
	{
	    print "Abort [A] or Continue [C]? ";

	    $answer = <STDIN>; chomp $answer;
	}
	until( $answer =~ /[AaCc]/ );

	die "Sorry\n" if $answer =~ /[Aa]/i;
    }

    $finalRC &&= $rc;
}

__END__
